{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# dual_autodiff Tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import modules\n",
    "\n",
    "import dual_autodiff as df\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x.real = 2, x.dual = 1\n"
     ]
    }
   ],
   "source": [
    "# initialise dual number\n",
    "x = df.Dual(2, 1)\n",
    "print(f\"x.real = {x.real}, x.dual = {x.dual}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dual(real=2, dual=1)\n"
     ]
    }
   ],
   "source": [
    "# printing dual number\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x + y = Dual(real=5, dual=3)\n",
      "x - y = Dual(real=-1, dual=-1)\n",
      "x * y = Dual(real=6, dual=7)\n",
      "x / y = Dual(real=0.6666666666666666, dual=-0.25)\n"
     ]
    }
   ],
   "source": [
    "# basic arithmetic operations\n",
    "\n",
    "x = df.Dual(2, 1)\n",
    "y = df.Dual(3, 2)\n",
    "\n",
    "print(f\"x + y = {x + y}\")\n",
    "print(f\"x - y = {x - y}\")\n",
    "print(f\"x * y = {x * y}\")\n",
    "print(f\"x / y = {x / y}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sin(x) = Dual(real=0.9092974268256817, dual=-0.4161468365471424)\n",
      "cos(x) = Dual(real=-0.4161468365471424, dual=-0.9092974268256817)\n",
      "tan(x) = Dual(real=-2.185039863261519, dual=5.774399204041917)\n"
     ]
    }
   ],
   "source": [
    "# trigonometric operations\n",
    "\n",
    "print(f\"sin(x) = {x.sin()}\")\n",
    "print(f\"cos(x) = {x.cos()}\")\n",
    "print(f\"tan(x) = {x.tan()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log(x) = Dual(real=0.6931471805599453, dual=0.5)\n",
      "exp(x) = Dual(real=7.38905609893065, dual=7.38905609893065)\n"
     ]
    }
   ],
   "source": [
    "# the natural logarithm and exponential\n",
    "\n",
    "print(f\"log(x) = {x.log()}\")\n",
    "print(f\"exp(x) = {x.exp()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**y = Dual(real=8, dual=35.090354888959126)\n"
     ]
    }
   ],
   "source": [
    "# exponentiation\n",
    "\n",
    "print(f\"x**y = {x**y}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log(sin(x)) + x^2 cos(x) = 0.15665054756073515\n",
      "d/dx(log(sin(x)) + x^2 cos(x)) = -1.9612372705533612\n"
     ]
    }
   ],
   "source": [
    "# automatic differentiation\n",
    "\n",
    "#initialise x = 1.5, with x.dual = 1 to allow for differentiation\n",
    "x = df.Dual(1.5, 1)\n",
    "\n",
    "function = x.sin().log() + x**2 * x.cos() #f(x) = log(sin(x)) + x^2 * cos(x)\n",
    "\n",
    "print(f\"log(sin(x)) + x^2 cos(x) = {function.real}\")\n",
    "print(f\"d/dx(log(sin(x)) + x^2 cos(x)) = {function.dual}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = Dual(real=2, dual=1)\n",
      "z = Dual(real=0.5, dual=1)\n",
      "\n",
      "arccos(z) = Dual(real=1.0471975511965979, dual=-1.1547005383792517)\n",
      "cosh(x) = Dual(real=3.7621956910836314, dual=-3.626860407847019)\n",
      "arccosh(x) = Dual(real=1.3169578969248166, dual=0.5773502691896258)\n",
      "sec(x) = Dual(real=-2.402997961722381, dual=-5.25064633769958)\n",
      "arcsec(x) = Dual(real=1.0471975511965979, dual=0.2886751345948129)\n",
      "sech(x) = Dual(real=0.2658022288340797, dual=-0.2562406794416764)\n",
      "arcsech(z) = Dual(real=1.3169578969248166, dual=-2.3094010767585034)\n",
      "\n",
      "arcsin(z) = Dual(real=0.5235987755982989, dual=1.1547005383792517)\n",
      "sinh(x) = Dual(real=3.626860407847019, dual=3.7621956910836314)\n",
      "arcsinh(x) = Dual(real=1.4436354751788103, dual=0.4472135954999579)\n",
      "csc(x) = Dual(real=1.0997501702946164, dual=0.503308973344342)\n",
      "arccsc(x) = Dual(real=0.5235987755982989, dual=-0.2886751345948129)\n",
      "csch(x) = Dual(real=0.2757205647717832, dual=-0.2860090006450841)\n",
      "arccsch(x) = Dual(real=0.48121182505960347, dual=-0.22360679774997896)\n",
      "\n",
      "arctan(z) = Dual(real=0.4636476090008061, dual=0.8)\n",
      "tanh(x) = Dual(real=0.9640275800758169, dual=0.07065082485316448)\n",
      "arctanh(z) = Dual(real=0.5493061443340548, dual=1.3333333333333333)\n",
      "cot(x) = Dual(real=-0.45765755436028577, dual=-1.209450437063038)\n",
      "arccot(x) = Dual(real=0.4636476090008061, dual=-0.2)\n",
      "coth(x) = Dual(real=1.0373147207275482, dual=-0.07602182983807108)\n"
     ]
    }
   ],
   "source": [
    "# other trigonometric functions:\n",
    "x = df.Dual(2, 1)\n",
    "z = df.Dual(0.5, 1)\n",
    "\n",
    "print(f\"x = {x}\")\n",
    "print(f\"z = {z}\")\n",
    "print(\"\")\n",
    "print(f\"arccos(z) = {z.arccos()}\")\n",
    "print(f\"cosh(x) = {x.cosh()}\")\n",
    "print(f\"arccosh(x) = {x.arccosh()}\")\n",
    "print(f\"sec(x) = {x.sec()}\")\n",
    "print(f\"arcsec(x) = {x.arcsec()}\")\n",
    "print(f\"sech(x) = {x.sech()}\")\n",
    "print(f\"arcsech(z) = {z.arcsech()}\")\n",
    "print(\"\")\n",
    "print(f\"arcsin(z) = {z.arcsin()}\")\n",
    "print(f\"sinh(x) = {x.sinh()}\")\n",
    "print(f\"arcsinh(x) = {x.arcsinh()}\")\n",
    "print(f\"csc(x) = {x.csc()}\")\n",
    "print(f\"arccsc(x) = {x.arccsc()}\")\n",
    "print(f\"csch(x) = {x.csch()}\")\n",
    "print(f\"arccsch(x) = {x.arccsch()}\")\n",
    "print(\"\")\n",
    "print(f\"arctan(z) = {z.arctan()}\")\n",
    "print(f\"tanh(x) = {x.tanh()}\")\n",
    "print(f\"arctanh(z) = {z.arctanh()}\")\n",
    "print(f\"cot(x) = {x.cot()}\")\n",
    "print(f\"arccot(x) = {x.arccot()}\")\n",
    "print(f\"coth(x) = {x.coth()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dad",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
